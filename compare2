import pandas as pd
import numpy as np
# import openpyxl
import xlsxwriter
import time
import sys

# Todo : 하나의 Process Data 내에서 중복인 경우 처리
# TODO : 기존 변경된 tag 관련 문제 수정

start1 = time.time()

"""
### ABBREVEATION ###
orig : original


### valiables ###

df_ : dataframe
li_ : list
di_ : dictionary
pd : process data
du : duplicate
dn : digit number
sigfig : significant figure (유효숫자)
ind : index
idx : index

"""

"""
(df3 는 inst. list, df4 는 piping_summary)
Vlookup 은 merge 로 수행하며, merge 시 컬럼명이 같으면 추가 해야 할 행만 추가 가능하다.
df5 = df3.merge(df4[['LINE CLASS', 'RATING']], how = 'left', on = 'LINE CLASS')
컬럼명이 다를 경우 left_on, right_on 으로 해당 컬럼명을 지정하면 되나,
비교기준이 되는 열이 추가된다.
df5 = df3.merge(df4[['LINE CLASS','RATING']], how = 'left', left_on = 'LineClass', right_on='LINE CLASS')
"""

"""
excel 상 Index(match(match)) 로 구성되는, LINE CLASS 와 lINE SIZE 로 PIPE SCHEDULE 을 지정하는 것은, unstack 을 사용한다.
piping_summary 를 unstack 하면서, schedule 값을 to_frame("블라블라") 으로 지정해주면, 블라블라가 스케줄값의 열이름이 된다.
예제 실행 시
piping_summary 가 이중인덱스를 가지게 되고, 그 인덱스와 Inst. List 의 LineSize 와 Line Class 중 일치하는 값(스케줄값)을 찾아
해당 열을 추가해준다. (Inst. List 에 Sch 열이 있다면, 그 것과 별도의 Sch_y 같은 열로 추가된다.)

df6 = df3.merge(df4.set_index("LINE CLASS").unstack().to_frame("Sch"), left_on=["LineSize", "LINE CLASS"], right_index=True)

"""

# Pipe Pressure Temperature Rating Table 및 보간법을 통한 Rating 적정성 확인
# TODO : 아래 out 값으로 받은 array 값을 상수로 활용하는 방안
'''
import pandas as pd
import numpy as np
from scipy.interpolate import griddata
df = pd.read_excel('D:/InstData/sample3.xlsx', index_col=0)
'''

'''
        0.1     0.2     0.3     0.4     0.5
0.1    4.01   31.86   68.01  103.93  139.20
0.2   24.07   57.49   91.37  125.21  158.57
0.3   44.35   76.40  108.97  141.57  173.78
0.4   59.66   91.02  122.80  154.62  186.13
0.5   87.15  117.90  148.86  179.83  210.48
0.6  106.92  137.41  168.26  198.99  229.06
0.7  121.73  152.48  183.40  213.88  243.33
'''

'''
# (index 축) - 범위 바깥이면 nan 값으로 표기됨
a=0.3
#(column 축)
b=0.35
# Index 와 column 이 배열의 좌표값과 같이 [Index, Column, Value] 의 배열로 만들어짐
n = df.stack().reset_index().values

out = griddata(n[:,0:2], n[:,2], [(a, b)], method='linear')

'''

from math import floor, log10

# TODO : Data Sheet Range 지정하기 (5단위 반올림 등)
# Prcd 1 : 엑셀파일 불러오기

df_pd_r0_orig = pd.read_excel('AVEVA_Mass_R1.xlsx', dtype='object')
df_pd_r1_orig = pd.read_excel('AVEVA_Mass_R2.xlsx', dtype='object')

# Todo : Sheet 별로도 작성
# xl = pd.ExcelFile('PD_INS_221007.xlsx')
# sh_name = xl.sheet_names
# print(sh_name)

# Todo: Data Sheet 에 작성 기준 Process Data 파일 이름을 명기하면 좋겠음

# Prcd 2 : 불러온 엑셀파일(원본 DF)을 다른이름에 저장하고, 빈셀에 '-' 을 넣고 중복확인 함
df_pd_r0 = df_pd_r0_orig.copy()
df_pd_r0 = df_pd_r0.fillna('-')
df_pd_r0 = df_pd_r0.drop(index=df_pd_r0[df_pd_r0['TagNo'] == '-'].index)

du_count = len(df_pd_r0.index) - df_pd_r0['TagNo'].nunique()  # Tag No 중복 여부 확인
if du_count >= 1:
    li_du = set(df_pd_r0.loc[df_pd_r0.duplicated(['TagNo']), 'TagNo'])
    print('중복 Tag No 는 다음과 같습니다.', li_du)
    sys.exit()

# 원본에 포맷 지정 시 NAN 이 있으면 에러발생. Workbook 생성에 대한 NAN 수용 옵션이 있는것 같음
df_pd_r1_orig = df_pd_r1_orig.fillna('-')

df_pd_r1 = df_pd_r1_orig.copy()
df_pd_r1 = df_pd_r1.fillna('-')
df_pd_r1 = df_pd_r1.drop(index=df_pd_r1[df_pd_r1['TagNo'] == '-'].index)

du_count = len(df_pd_r1.index) - df_pd_r1['TagNo'].nunique()  # Tag No 중복 여부 확인
if du_count >= 1:
    li_du = set(df_pd_r1.loc[df_pd_r1.duplicated(['TagNo']), 'TagNo'])
    print('중복 Tag No 는 다음과 같습니다.', li_du)
    sys.exit()

sigfig = 3

end1 = time.time()

# TODO : 유효 숫자, 반올림 등 조건 확립(코딩 방법 재확인), 유량 외의 적용할 다른 값(온,압 등) 과 기준 확인해야함

# Prcd 3 : 유효 숫자, 반올림함
def roundFlow(x):
    if type(x) is float:
        if x >= 100:
            x = round(x, sigfig - int(floor(log10(abs(x)))) - 1)
            x = int(x)
            return x
        elif 100 > x >= 0.1:
            x = round(x + 10 ** (-len(str(x)) - 1), 1)
            return x
        else:
            x = round(x + 10 ** (-len(str(x)) - 1), 3)
            return x

    elif type(x) is int:
        if x >= 100:
            x = round(x, sigfig - int(floor(log10(abs(x)))) - 1)
            return x
        else:
            return x
    else:
        return x

try:
    df_pd_r0['FlowMax'] = df_pd_r0['FlowMax'].apply(lambda x: roundFlow(x))
    df_pd_r0['FlowNormal'] = df_pd_r0['FlowNormal'].apply(lambda x: roundFlow(x))
    df_pd_r0['FlowMin'] = df_pd_r0['FlowMin'].apply(lambda x: roundFlow(x))

    df_pd_r1['FlowMax'] = df_pd_r1['FlowMax'].apply(lambda x: roundFlow(x))
    df_pd_r1['FlowNormal'] = df_pd_r1['FlowNormal'].apply(lambda x: roundFlow(x))
    df_pd_r1['FlowMin'] = df_pd_r1['FlowMin'].apply(lambda x: roundFlow(x))

except:
    print("No Column Name")
    pass

revNo = 0

# Prcd 4 : 비교할 파일 순으로 Version Control 함. 추후 해당 열을 삭제하거나, 추가한 열을 제외하고 불러옴
df_pd_r0['RevCon'] = 1
df_pd_r1['RevCon'] = 2

# !!!!이게되네;; Status 열에서 FT-002 인 열의 TagNo
# tag = set(df2[df2['Status'] == 'FT-002']['TagNo'])
# !!!!df.loc[(df['A'] >= 5) & (df['A'] < 8), 'B']
# !!!!df.index.get_loc(df.index[df['b'] == 5][0])
# 판다스 조건/// Data Sheet 작성 조건
# !!!!df.loc[df['age']>40, 'generation'] = '장년'

# TODO : Deleted 열의 Status 에 따른 Tag 확인 부가 복잡하므로 간단하게 정리 필요

# Prcd 5 : tag no 변경 아이템 처리
# Tag no 변경 후 비교 시 추가 아이템이 되므로 이전 tag no 로 변경하든, 기존 tag no 를 변경된 tag 로 변경 후 비교해야함.
# 변경 후에는 다시 원복해야 함 (원본 df 와 비교 시 tag no 를 못찾게 되는 경우가 발생함)

# Prcd 5-1 : Deleted 열에 tag no 가 있는 행을 DF 로 불러옴 (contains 사용 시 Nan 값이 있으면 에러남)
df_tag_changed1 = df_pd_r1[~df_pd_r1['Deleted'].str.contains('del|Del|DEL|add|Add|ADD')].iloc[:, :-1]
df_tag_changed2 = df_tag_changed1[df_tag_changed1['Deleted'].str.len() > 5]

# ex1) 변경된 Tag No 와 기존 Tag No 가 추가/삭제가 되지 않도록, 변경된 Tag No 를 기존 Tag No 로 변경
# set_old_tag = set(df_tag_changed2['Deleted'])
#
# for i in set_old_tag:
#     df_pd_r1.loc[df_pd_r1['Deleted'] == i, 'TagNo'] = i

# ex2) 변경된 Tag No 와 기존 Tag No 가 추가/삭제가 되지 않도록, 기존 Tag No 를 변경된 Tag No 로 변경

# Prcd 5-2 : set_old_tag = set(df_tag_changed2['Deleted']) 처럼 불러올 수도 있으나, set 적용 시 순번이 달라질 수 있으므로 list 로 가져옴
li_new_tag = df_tag_changed2['TagNo'].tolist()
li_old_tag = df_tag_changed2['Deleted'].tolist()
# Tag No 추가/삭제 비교를 위해 기존 tag no 를 신규 tag no 로 변경하여 비교 후, 다시 기존 tag no 와의 비교를 위해 df_pd_r0_tagExist 를 생성
# df_pd_r0_tagExist = df_pd_r0.copy()

for i, j in zip(li_old_tag, li_new_tag):
    df_pd_r0.loc[df_pd_r0['TagNo'] == i, 'TagNo'] = j

# Prcd 5-3 : 추가/삭제를 tag no 기반으로 확인하여 집합으로 취합 (Deleted 열의 Del, Add 가 표시되어 있지 않을 경우를 대비함)
set_del1 = set(df_pd_r0['TagNo']) - set(df_pd_r1['TagNo'])
set_add = set(df_pd_r1['TagNo']) - set(df_pd_r0['TagNo'])

df_del1 = df_pd_r0[df_pd_r0['TagNo'].isin(set_del1)].iloc[:, :-1]
df_add = df_pd_r1[df_pd_r1['TagNo'].isin(set_add)].iloc[:, :-1]

# Prcd 5-4 : Deleted 열에 삭제 표기가 된 tag no 를 집합으로 취합
df_del_r0 = df_pd_r0[df_pd_r0['Deleted'].str.contains('del|Del|DEL')].iloc[:, :-1]
df_del_r1 = df_pd_r1[df_pd_r1['Deleted'].str.contains('del|Del|DEL')].iloc[:, :-1]
set_del2 = set(df_del_r1['TagNo']) - set(df_del_r0['TagNo'])  # Deleted 열에 삭제 표기 기준으로 New 에 삭제된 아이템

df_del2 = df_pd_r1[df_pd_r1['TagNo'].isin(set_del2)].iloc[:, :-1]

# Prcd 5-5 : Tag No 유무로 확인한 삭제 아이템과 Deleted 열의 표시로 확인한 삭제 아이템을 취합
df_del_total = pd.concat([df_del1, df_del2], ignore_index=True)
set_del_total = set(df_del_total['TagNo'])

# Prcd 5-6 : 비교할 DF 에서 Deleted 열에 삭제 표기가 된 아이템 제외(Deleted 열 기준) - 삭제 아이템중 변경 사항 시 변경된 아이템에 포함됨 (삭선처리 안됨)
# df_pd_r0, df_pd_r1 에서 del item 삭제 (차집합)
# index no 가 다른 DF 끼리 차집합시에는 Future Warning 이 뜨는 것 같음.
# FutureWarning: In a future version, the Index constructor will not infer numeric dtypes
# when passed object-dtype sequences (matching Series behavior).

df_pd_r0 = pd.merge(df_pd_r0, df_del_r0, how='outer', indicator=True).query('_merge == "left_only"').drop(
    columns=['_merge'])
df_pd_r1 = pd.merge(df_pd_r1, df_del_r1, how='outer', indicator=True).query('_merge == "left_only"').drop(
    columns=['_merge'])

# Prcd 6: Old/New DF 를 병합 후 중복을 제거하여 변경된 아이템 추출 과정
df_conc = pd.concat([df_pd_r0, df_pd_r1], ignore_index=True)
df_drop_du = df_conc.drop_duplicates(df_conc.columns[2:-1], keep='last')

# Prcd 6-1 : 중복 제거 후 Tag No 가 중복되어있는 아이템(변경된 아이템) 을 취합 (중복이 아닌 아이템은 추가/삭제 아이템)
li_du = df_drop_du[df_drop_du['TagNo'].duplicated()]['TagNo'].tolist()
df_changes = df_drop_du[df_drop_du['TagNo'].isin(li_du)]

# Prcd 6-2 : 변경된 아이템(중복 삭제 후에도 tag 가 중복된 아이템)을 Old/New 로 분리
# 맨 뒤의 iloc 은 맨끝이나 맨 앞쪽부터 비교시 분리해야할 컬럼을 위해 사용함. 전체를 나타내도 무방할 경우 삭제.
df_changes_r0 = df_changes[df_changes['RevCon'] == 1].iloc[:, :-1]
df_changes_r0.sort_values(by='TagNo', inplace=True)

df_changes_r1 = df_changes[df_changes['RevCon'] == 2].iloc[:, :-1]
df_changes_r1.sort_values(by='TagNo', inplace=True)

# Prcd 6-3 : Tag No 를 기준으로 변경된 DF 선별 후, 변경된 tag no 로 수정한 아이템을 기존 tag no 로 수정함
for i, j in zip(li_new_tag, li_old_tag):
    df_changes_r0.loc[df_changes_r0['TagNo'] == i, 'TagNo'] = j

end2 = time.time()

# Prcd 7 : 변경된 셀의 포맷 지정을 위하여 리스트 화 (포맷 지정 시 좌표값 및 해당 셀의 값 그리고 포맷 세팅을 지정해야함. xlsxwriter 기준)
# TODO : openpyxl 로 수정 시 해당 셀 값 필요없이 좌표값만 있으면 됨
li_inf_change = []
li_inf_change_orig = []
li_color = []

li_tag_inf_change = []
li_tag_inf_change_orig = []
li_tag_color = []

end3 = time.time()

# TODO : Process Data 의 파일별 이름으로 추후 적용해야함

# Prcd 8 : Index 를 iat 의 좌표값에 사용하기 위해 Index 초기화
# Prcd Branch : 9번은 .index.get_loc() 적용, 10번은 초기화된 index 를 좌표값으로 사용
df_color = df_pd_r1_orig.reset_index(drop=True)
df_col_inf = df_pd_r1_orig.reset_index(drop=True)
df_inf_change = df_changes_r1.reset_index(drop=True)

# Todo 변경된 것이 없을 경우 처리 방법 구현해야함 (구현할게 있나... df.empty 가 True 면 빈 DF임)

# Prcd 9 : DF 비교 및 get_loc 을 이용하여 셀 포맷을 위한 리스트 작성
# for i in range(len(df_changes_r1.index)):
#     for j in range(len(df_changes_r1.columns)):
#         if df_changes_r1.iat[i, j] != df_changes_r0.iat[i, j]:
#             df_inf_change.iat[i, j] = str(df_changes_r0.iat[i, j]) + " => " + str(df_changes_r1.iat[i, j])
#
#             # 변경된 아이템의 Tag No 를 원본에서 찾아 그 index 를 리스트로 저장
#             li_idx_no = df_col_inf[df_col_inf['TagNo'] == df_changes_r1.iat[i, 3]].index
#             li_idx = li_idx_no.tolist()
#             idx = df_col_inf.index.get_loc(li_idx_no[0])
#
#             li_inf_change.append([i, j, df_inf_change.iat[i, j]])
#             li_inf_change_orig.append([idx, j, df_inf_change.iat[i, j]])
#             li_color.append([idx, j, df_color.iat[idx, j]])

# else : continue

# Prcd 10 : DF 비교 및 초기화된 Index 를 좌표값으로 사용하여 셀 포맷을 위한 리스트 작성
for i in range(len(df_changes_r1.index)):
    for j in range(len(df_changes_r1.columns)):
        if df_changes_r1.iat[i, j] != df_changes_r0.iat[i, j]:
            df_inf_change.iat[i, j] = str(df_changes_r0.iat[i, j]) + " => " + str(df_changes_r1.iat[i, j])

            # 변경된 아이템의 Tag No 를 원본에서 찾아 그 index 를 리스트로 저장
            li_change_index = df_col_inf[df_col_inf['TagNo'] == df_changes_r1.iat[i, 3]].index.tolist()

            li_inf_change.append([i, j, df_inf_change.iat[i, j]])
            li_inf_change_orig.append([li_change_index[0], j, df_inf_change.iat[i, j]])
            li_color.append([li_change_index[0], j, df_color.iat[li_change_index[0], j]])

end4 = time.time()

# Prcd 11 : 변경/추가/삭제의 DF 사이에 빈 행을 추가(식별용이) 후 하나로 취합 (하나의 Sheet 에 표기하고자 함)
df_inf_change.loc[99999] = ""
df_add.loc[99999] = ""

df_inf_change = pd.concat([df_inf_change, df_add, df_del_total], ignore_index=True)


# TODO : 엑셀로 출력 시, 컬러마킹 시트 혹은 변경 전후 값 시트 중 하나를 고를지 모두 출력할지 선택할 수 있도록 수정 요함

# Prcd 12 : df_col_inf 와 df_color 에 표기되는 삭제 아이템의 포맷을 위한 enumerate 작성 (삭선만)
# df_col_inf 와 df_color 는 동일한 DF임
li_del_enum1 = []
li_del_enum2 = []
li_idx_del = df_col_inf[df_col_inf['TagNo'].isin(set(df_del_r1['TagNo']))].index.tolist()

for i in li_idx_del:
    for j in range(len(df_col_inf.columns)):
        li_del_enum1.append([i, j, df_col_inf.iat[i, j]])
        li_del_enum2.append([i, j, df_color.iat[i, j]])

# Prcd 13 : inf_changed 에 표기되는 삭제 아이템의 포맷을 위한 enumerate 작성 (삭선 및 색상)
li_del_enum3 = []
li_idx_del2 = df_inf_change[df_inf_change['TagNo'].isin(set_del_total)].index.tolist()

for i in li_idx_del2:
    for j in range(len(df_inf_change.columns)):
        li_del_enum3.append([i, j, df_inf_change.iat[i, j]])

# Prcd 14 : df_col_inf 와 df_color 에 표기되는 추가 아이템의 포맷을 위한 enumerate 작성
li_add_enum1 = []
li_add_enum2 = []
li_idx_add = df_col_inf[df_col_inf['TagNo'].isin(set_add)].index.tolist()

for i in li_idx_add:
    for j in range(len(df_inf_change.columns)):
        li_add_enum1.append([i, j, df_col_inf.iat[i, j]])
        li_add_enum2.append([i, j, df_color.iat[i, j]])

# Prcd 15 : inf_changed 에 표기되는 추가 아이템의 포맷을 위한 enumerate 작성
li_add_enum3 = []
li_idx_add = df_inf_change[df_inf_change['TagNo'].isin(set_add)].index.tolist()

for i in li_idx_add:
    for j in range(len(df_inf_change.columns)):
        li_add_enum3.append([i, j, df_inf_change.iat[i, j]])

# Prcd 16 : 엑셀파일 생성
xlFileName = "DataComp6.xlsx"
# Excel 출력, 하기 순서대로 sheet 작성
writer = pd.ExcelWriter(xlFileName, engine="xlsxwriter")
df_col_inf.to_excel(writer, sheet_name='df_col_inf', index=False)
df_color.to_excel(writer, sheet_name='df_color', index=False)
df_inf_change.to_excel(writer, sheet_name='infor_changed', index=False)

workbook = writer.book
worksheet1 = writer.sheets['df_col_inf']
worksheet2 = writer.sheets['df_color']
worksheet3 = writer.sheets['infor_changed']

# Prcd 17 : 셀 서식 만들기
header_format = workbook.add_format({'bold': True, 'valign': 'vcenter', 'fg_color': '#D3D3D3', 'border': 1})
inf_change_format = workbook.add_format({'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})
gen_format = workbook.add_format({'border': 1, 'valign': 'vcenter'})
del_format = workbook.add_format({'font_strikeout': True, 'valign': 'vcenter', 'border': 1})
del_format2 = workbook.add_format({'font_strikeout': True, 'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})
add_format = workbook.add_format({'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})

# Prcd 17-1 : 셀 테두리 설정
worksheet1.set_column(0, df_inf_change.shape[1] - 1, None, gen_format)
worksheet2.set_column(0, df_col_inf.shape[1] - 1, None, gen_format)
worksheet3.set_column(0, df_color.shape[1] - 1, None, gen_format)
# Prcd 17-2 : 셀 틀 고정
worksheet1.freeze_panes('F2')
worksheet2.freeze_panes(1, 5)
worksheet3.freeze_panes('F2')
# Prcd 17-3 : 셀 필터링
worksheet1.autofilter(0, 0, df_col_inf.shape[0] - 1, df_col_inf.shape[1] - 1, )
worksheet2.autofilter(0, 0, df_color.shape[0] - 1, df_color.shape[1] - 1, )
worksheet3.autofilter(0, 0, df_inf_change.shape[0] - 1, df_inf_change.shape[1] - 1, )

start2 = time.time()


# Prcd 18 : Header 포맷 적용
for col_num, val in enumerate(df_col_inf.columns.values):
    worksheet1.write(0, col_num, val, header_format)

for col_num, val in enumerate(df_color.columns.values):
    worksheet2.write(0, col_num, val, header_format)

for col_num, val in enumerate(df_inf_change.columns.values):
    worksheet3.write(0, col_num, val, header_format)

# Prcd 18-1 : 변경사항 포맷 적용
for i, j, v in li_inf_change_orig:
    worksheet1.write(i + 1, j, v, inf_change_format)

for i, j, v in li_color:
    worksheet2.write(i + 1, j, v, inf_change_format)

for i, j, v in li_inf_change:
    worksheet3.write(i + 1, j, v, inf_change_format)

# Prcd 18-2 : 삭제아이템 포맷 적용
for i, j, v in li_del_enum1:
    worksheet1.write(i + 1, j, v, del_format)

for i, j, v in li_del_enum2:
    worksheet2.write(i + 1, j, v, del_format)

for i, j, v in li_del_enum3:
    worksheet3.write(i + 1, j, v, del_format2)

# Prcd 18-3 : 추가아이템 포맷 적용
for i, j, v in li_add_enum1:
    worksheet1.write(i + 1, j, v, add_format)

for i, j, v in li_add_enum2:
    worksheet2.write(i + 1, j, v, add_format)

for i, j, v in li_add_enum3:
    worksheet3.write(i + 1, j, v, add_format)

# Prcd 19 : 종료
writer.close()

end5 = time.time()

print(f"{end1 - start1:.5f} sec")
print(f"{end2 - start1:.5f} sec")
print(f"{end3 - start1:.5f} sec")
print(f"{end4 - start1:.5f} sec")
print(f"{end5 - start1:.5f} sec")
print(f"{end5 - start2:.5f} sec")
print(f'Excel file {xlFileName} was created')
