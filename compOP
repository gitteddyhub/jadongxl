import pandas as pd
import numpy as np

from openpyxl import load_workbook
from openpyxl.styles import PatternFill

import xlsxwriter
import time
import sys

# Prcd 1 : Process Data 불러오기

dfPD_old_orig = pd.read_excel('AE_Sam4.xlsx', sheet_name=None, dtype='object')
dfPD_new_orig = pd.read_excel('AE_Sam5.xlsx', sheet_name=None, dtype='object')

wb=load_workbook('AE_Sam5.xlsx')

# Prcd 1-1 : Process Data 의 Sheet 이름을 확인하여, 이전버전과 현버전 중 공통된 Sheet 만 비교할 대상으로 리스트화함.
dfPD_old_orig_sh_li = list(dfPD_old_orig.keys())
dfPD_new_orig_sh_li = list(dfPD_new_orig.keys())

inter_li = list(set(dfPD_old_orig_sh_li) & set(dfPD_new_orig_sh_li))

df_old_list = []
df_new_list = []
compare_sh_li = []
missing_sh_list = []
ws_list = []

if 'Flow' in inter_li:
    df_old_list.append(dfPD_old_orig['Flow'])
    df_new_list.append(dfPD_new_orig['Flow'])
    compare_sh_li.append('Flow')
    ws_flow = wb['Flow']
    ws_list.append(ws_flow)
else:
    missing_sh_list.append('Flow')

if 'Level' in inter_li:
    df_old_list.append(dfPD_old_orig['Level'])
    df_new_list.append(dfPD_new_orig['Level'])
    compare_sh_li.append('Level')
else:
    missing_sh_list.append('Level')

if 'Press' in inter_li:
    df_old_list.append(dfPD_old_orig['Press'])
    df_new_list.append(dfPD_new_orig['Press'])
    compare_sh_li.append('Press')
else:
    missing_sh_list.append('Press')

if 'Temp' in inter_li:
    df_old_list.append(dfPD_old_orig['Temp'])
    df_new_list.append(dfPD_new_orig['Temp'])
    compare_sh_li.append('Temp')
else:
    missing_sh_list.append('Temp')
    
if 'CV' in inter_li:
    df_old_list.append(dfPD_old_orig['CV'])
    df_new_list.append(dfPD_new_orig['CV'])
    compare_sh_li.append('CV')
else:
    missing_sh_list.append('CV')

if 'On-Off' in inter_li:
    df_old_list.append(dfPD_old_orig['On-Off'])
    df_new_list.append(dfPD_new_orig['On-Off'])
    compare_sh_li.append('On-Off')
else:
    missing_sh_list.append('On-Off')

if 'PSV' in inter_li:
    df_old_list.append(dfPD_old_orig['PSV'])
    df_new_list.append(dfPD_new_orig['PSV'])
    compare_sh_li.append('PSV')
else:
    missing_sh_list.append('PSV')

# print(df_old_list)
# print('============df_new_list============')
# print(df_new_list)
# print('============compare_sh_li============')
# print(compare_sh_li)
# print('============missing_sh_li============')
# print(missing_sh_list)

# Prcd 2 : 불러온 엑셀파일(원본 DF)을 다른이름에 저장하고, 빈셀에 '-' 을 넣고 중복확인 함.
# Prcd 2-1 : 또한 비교할 파일 순으로 Version Control 함. 추후 해당 열을 삭제하거나, 추가한 열을 제외하고 불러옴

for i in range(len(df_old_list)):
    df_old_list[i] = df_old_list[i].fillna('-')
    df_old_list[i] = df_old_list[i].drop(index=df_old_list[i][df_old_list[i]['Name'] == '-'].index)
    df_old_list[i]['RevCon'] = 1
    du_count = len(df_old_list[i].index) - df_old_list[i]['Name'].nunique() # Tag No 중복 여부 확인 (unique 한 값이 몇개인지 알려줌)
    if du_count >= 1:
        li_du = set(df_old_list[i].loc[df_old_list[i].duplicated(['Name']), 'Name'])
        print('첫번째 Process Data 의 중복 Tag No 는 다음과 같습니다.', li_du)
        sys.exit()

for i in range(len(df_new_list)):
    df_new_list[i] = df_new_list[i].fillna('-')
    df_new_list[i] = df_new_list[i].drop(index=df_new_list[i][df_new_list[i]['Name'] == '-'].index)
    df_new_list[i]['RevCon'] = 2
    du_count = len(df_new_list[i].index) - df_new_list[i]['Name'].nunique() # Tag No 중복 여부 확인 (unique 한 값이 몇개인지 알려줌)
    if du_count >= 1:
        li_du = set(df_new_list[i].loc[df_new_list[i].duplicated(['Name']), 'Name'])
        print('두번째 Process Data 의 중복 Tag No 는 다음과 같습니다.', li_du)
        sys.exit()


end1 = time.time()

# Prcd 5 : tag no 변경 아이템 처리
# Tag no 변경 후 비교 시 추가 아이템이 되므로 이전 tag no 로 변경하든, 기존 tag no 를 변경된 tag 로 변경 후 비교해야함.
# 변경 후에는 다시 원복해야 함 (원본 df 와 비교 시 tag no 를 못찾게 되는 경우가 발생함)

# tag no 변경의 case 는 크게 3개로 나뉜다.
# case1 : new version 에서 tag no 변경
# case2 : old version 및 new version 에서 모두 tag no 변경
# case3 : old version 에서 tag no 변경 후 해당 내용이 new 에도 동일하게 적용 (new version 에서 'Old Tag Name' 을 삭제하지 않음)
# case1, 2 는 new version 에서 'Old Tag Name' 이 있는 아이템만 df 로 취한 후 해당 df 의 'Old Tag Name' 과 'Name' 을 리스트화하여 old version 에 반영
# case3 로 인하여 old/new version 의 'Old Tag Name' 과 'Name' 이 각각 동일한 tag no 를 확인 후 기준 df 에서 삭제

# old 와 new 의 차이가 많이 나서 'Old Tag Name' 의 item 이 old 에 없는 경우 삭제 및 추가 아이템으로 반영됨

# Prcd 5-1 : Old Tag Name 열에 tag no 가 있는 행을 DF 로 불러옴 (contains 사용 시 Nan 값이 있으면 에러남)
df_tag_changed_flow = df_new_list[0][df_new_list[0]['Old Tag Name'].str.len() > 3]
df_already_tag_changed_flow = df_old_list[0][df_old_list[0]['Old Tag Name'].str.len() > 3]


li_new_tag_flow = df_tag_changed_flow['Name'].tolist()
li_old_tag_flow = df_tag_changed_flow['Old Tag Name'].tolist()

list_new = []
for i, j in zip(li_new_tag_flow, li_old_tag_flow):
    list_new.append([i,j])

already_li_new_tag_flow = df_already_tag_changed_flow['Name'].tolist()
already_li_old_tag_flow = df_already_tag_changed_flow['Old Tag Name'].tolist()

list_old = []
for i, j in zip(already_li_new_tag_flow, already_li_old_tag_flow):
    list_old.append([i,j])

unchanged_tag_li = []
# unchanged_tag_li = list(set(list_new) & set(list_old)) # 2차원 리스트는 교집합 적용 안됨 unhashable

for i in range(len(list_old)):
    if list_old[i] in list_new:
        unchanged_tag_li.append(list_old[i][0])

df_tag_changed_flow = df_tag_changed_flow[~df_tag_changed_flow['Name'].isin(unchanged_tag_li)]


# Prcd 5-2 : set_old_tag = set(df_tag_changed2['Old Tag Name']) 처럼 불러올 수도 있으나, set 적용 시 순번이 달라질 수 있으므로 list 로 가져옴
li_new_tag_flow = df_tag_changed_flow['Name'].tolist()

li_old_tag_flow = df_tag_changed_flow['Old Tag Name'].tolist()


for i, j in zip(li_old_tag_flow, li_new_tag_flow):
    df_old_list[0].loc[df_old_list[0]['Name'] == i, 'Name'] = j


# Prcd 5-3 : 추가/삭제를 tag no 기반으로 확인하여 집합으로 취합
# Prcd 5-3-1 ('Logically deleted from the project' 열의 True or False 가 표시되어 있지 않을 경우를 대비함)
set_del1 = set(df_old_list[0]['Name']) - set(df_new_list[0]['Name'])
set_add = set(df_new_list[0]['Name']) - set(df_old_list[0]['Name'])

df_del1 = df_old_list[0][df_old_list[0]['Name'].isin(set_del1)].iloc[:, :-1]
df_add = df_new_list[0][df_new_list[0]['Name'].isin(set_add)].iloc[:, :-1]

# Prcd 5-4 : 'Logically deleted from the project' 열에 삭제 표기가 된 tag no 를 집합으로 취합
df_del_old = df_old_list[0][df_old_list[0]['Logically deleted from the project'].str.contains('TRUE|True|true')].iloc[:, :-1]
df_del_new = df_new_list[0][df_new_list[0]['Logically deleted from the project'].str.contains('TRUE|True|true')].iloc[:, :-1]
set_del2 = set(df_del_new['Name']) - set(df_del_old['Name'])  # Deleted 열에 삭제 표기 기준으로 New 에 삭제된 아이템

df_del2 = df_new_list[0][df_new_list[0]['Name'].isin(set_del2)].iloc[:, :-1]

# Prcd 5-5 : Tag No 유무로 확인한 삭제 아이템과 Deleted 열의 표시로 확인한 삭제 아이템을 취합
df_del_total = pd.concat([df_del1, df_del2], ignore_index=True)
set_del_total = set(df_del_total['Name'])

# Prcd 5-6 : 비교할 DF 에서 'Logically deleted from the project' 열에 삭제 표기가 된 아이템 제외
# TODO : 삭제 아이템중 변경 사항 시 변경된 아이템에 포함됨 (삭선처리 안됨)
# 합집합 후 왼쪽의 DF 만 남김
# dfPD_old, dfPD_new 에서 del item 삭제 (차집합)
# index no 가 다른 DF 끼리 차집합시에는 Future Warning 이 뜨는 것 같음.
# FutureWarning: In a future version, the Index constructor will not infer numeric dtypes
# when passed object-dtype sequences (matching Series behavior).

# TODO : 삭제 아이템 제외 시 df_del_total 을 적용해야하는 것이 아닌지 확인 요함 (중요!!)
# TODO : 삭제 아이템 제외관련 schematic 재정립 필요
df_old_list[0] = pd.merge(df_old_list[0], df_del_old, how='outer', indicator=True).query('_merge == "left_only"').drop(
    columns=['_merge'])
df_new_list[0] = pd.merge(df_new_list[0], df_del_new, how='outer', indicator=True).query('_merge == "left_only"').drop(
    columns=['_merge'])


# Prcd 6: Old/New DF 를 병합 후 중복을 제거하여 변경된 아이템 추출 과정
df_conc = pd.concat([df_old_list[0], df_new_list[0]], ignore_index=True)
df_drop_du = df_conc.drop_duplicates(df_conc.columns[1:-1], keep='last')

# Prcd 6-1 : 중복 제거 후 Tag No 가 중복되어있는 아이템(변경된 아이템) 을 취합 (중복이 아닌 아이템은 추가/삭제 아이템)
li_du = df_drop_du[df_drop_du['Name'].duplicated()]['Name'].tolist()
df_changes = df_drop_du[df_drop_du['Name'].isin(li_du)]

# Prcd 6-2 : 변경된 아이템(중복 삭제 후에도 tag 가 중복된 아이템)을 Old/New 로 분리
# 맨 뒤의 iloc 은 맨끝이나 맨 앞쪽부터 비교시 분리해야할 컬럼을 위해 사용함. 전체를 나타내도 무방할 경우 삭제.
df_changes_old = df_changes[df_changes['RevCon'] == 1].iloc[:, :-1]
df_changes_old.sort_values(by='Name', inplace=True)

df_changes_new = df_changes[df_changes['RevCon'] == 2].iloc[:, :-1]
df_changes_new.sort_values(by='Name', inplace=True)

# Prcd 6-3 : Tag No 를 기준으로 변경된 DF 선별 후, 변경된 tag no 로 수정한 아이템을 기존 tag no 로 수정함
for i, j in zip(li_new_tag_flow, li_old_tag_flow):
    df_changes_old.loc[df_changes_old['Name'] == i, 'Name'] = j

end2 = time.time()

# Prcd 8 : Index 를 iat 의 좌표값에 사용하기 위해 Index 초기화
# Prcd Branch : 9번은 .index.get_loc() 적용, 10번은 초기화된 index 를 좌표값으로 사용
df_color = df_new_list[0].reset_index(drop=True)
df_col_inf = df_new_list[0].reset_index(drop=True)
df_inf_change = df_changes_new.reset_index(drop=True)

# Todo 변경된 것이 없을 경우 처리 방법 구현해야함 (구현할게 있나... df.empty 가 True 면 빈 DF임)

# Prcd 9 : DF 비교 및 get_loc 을 이용하여 셀 포맷을 위한 리스트 작성
# for i in range(len(df_changes_r1.index)):
#     for j in range(len(df_changes_r1.columns)):
#         if df_changes_r1.iat[i, j] != df_changes_r0.iat[i, j]:
#             df_inf_change.iat[i, j] = str(df_changes_r0.iat[i, j]) + " => " + str(df_changes_r1.iat[i, j])
#
#             # 변경된 아이템의 Tag No 를 원본에서 찾아 그 index 를 리스트로 저장
#             li_idx_no = df_col_inf[df_col_inf['TagNo'] == df_changes_r1.iat[i, 3]].index
#             li_idx = li_idx_no.tolist()
#             idx = df_col_inf.index.get_loc(li_idx_no[0])
#
#             li_inf_change.append([i, j, df_inf_change.iat[i, j]])
#             li_inf_change_orig.append([idx, j, df_inf_change.iat[i, j]])
#             li_color.append([idx, j, df_color.iat[idx, j]])

# else : continue

# Prcd 10 : DF 비교 및 초기화된 Index 를 좌표값으로 사용하여 셀 포맷을 위한 리스트 작성
for i in range(len(df_changes_new.index)):
    for j in range(len(df_changes_new.columns)):
        if df_changes_new.iat[i, j] != df_changes_old.iat[i, j]:
            df_inf_change.iat[i, j] = str(df_changes_old.iat[i, j]) + " => " + str(df_changes_new.iat[i, j])
            

            # 변경된 아이템의 Tag No 를 원본에서 찾아 그 index 를 리스트로 저장
            li_change_index = df_col_inf[df_col_inf['Name'] == df_changes_new.iat[i, 1]].index.tolist()
            print(li_change_index)

            # li_inf_change.append([i, j, df_inf_change.iat[i, j]])
            # li_inf_change_orig.append([li_change_index[0], j, df_inf_change.iat[i, j]])
            # li_color.append([li_change_index[0], j, df_color.iat[li_change_index[0], j]])



end4 = time.time()

# # Prcd 11 : 변경/추가/삭제의 DF 사이에 빈 행을 추가(식별용이) 후 하나로 취합 (하나의 Sheet 에 표기하고자 함)
# df_inf_change.loc[99999] = ""
# df_add.loc[99999] = ""
#
# df_inf_change = pd.concat([df_inf_change, df_add, df_del_total], ignore_index=True)
#
# # TODO : 엑셀로 출력 시, 컬러마킹 시트 혹은 변경 전후 값 시트 중 하나를 고를지 모두 출력할지 선택할 수 있도록 수정 요함
#
# # Prcd 12 : df_col_inf 와 df_color 에 표기되는 삭제 아이템의 포맷을 위한 enumerate 작성 (삭선만)
# # df_col_inf 와 df_color 는 동일한 DF임
# li_del_enum1 = []
# li_del_enum2 = []
# li_idx_del = df_col_inf[df_col_inf['TagNo'].isin(set(df_del_r1['TagNo']))].index.tolist()
#
# for i in li_idx_del:
#     for j in range(len(df_col_inf.columns)):
#         li_del_enum1.append([i, j, df_col_inf.iat[i, j]])
#         li_del_enum2.append([i, j, df_color.iat[i, j]])
#
# # Prcd 13 : inf_changed 에 표기되는 삭제 아이템의 포맷을 위한 enumerate 작성 (삭선 및 색상)
# li_del_enum3 = []
# li_idx_del2 = df_inf_change[df_inf_change['TagNo'].isin(set_del_total)].index.tolist()
#
# for i in li_idx_del2:
#     for j in range(len(df_inf_change.columns)):
#         li_del_enum3.append([i, j, df_inf_change.iat[i, j]])
#
# # Prcd 14 : df_col_inf 와 df_color 에 표기되는 추가 아이템의 포맷을 위한 enumerate 작성
# li_add_enum1 = []
# li_add_enum2 = []
# li_idx_add = df_col_inf[df_col_inf['TagNo'].isin(set_add)].index.tolist()
#
# for i in li_idx_add:
#     for j in range(len(df_inf_change.columns)):
#         li_add_enum1.append([i, j, df_col_inf.iat[i, j]])
#         li_add_enum2.append([i, j, df_color.iat[i, j]])
#
# # Prcd 15 : inf_changed 에 표기되는 추가 아이템의 포맷을 위한 enumerate 작성
# li_add_enum3 = []
# li_idx_add = df_inf_change[df_inf_change['TagNo'].isin(set_add)].index.tolist()
#
# for i in li_idx_add:
#     for j in range(len(df_inf_change.columns)):
#         li_add_enum3.append([i, j, df_inf_change.iat[i, j]])
#
# # Prcd 16 : 엑셀파일 생성
# xlFileName = "DataComp6.xlsx"
# # Excel 출력, 하기 순서대로 sheet 작성
# writer = pd.ExcelWriter(xlFileName, engine="xlsxwriter")
# df_col_inf.to_excel(writer, sheet_name='df_col_inf', index=False)
# df_color.to_excel(writer, sheet_name='df_color', index=False)
# df_inf_change.to_excel(writer, sheet_name='infor_changed', index=False)
#
# workbook = writer.book
# worksheet1 = writer.sheets['df_col_inf']
# worksheet2 = writer.sheets['df_color']
# worksheet3 = writer.sheets['infor_changed']
#
# # Prcd 17 : 셀 서식 만들기
# header_format = workbook.add_format({'bold': True, 'valign': 'vcenter', 'fg_color': '#D3D3D3', 'border': 1})
# inf_change_format = workbook.add_format({'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})
# gen_format = workbook.add_format({'border': 1, 'valign': 'vcenter'})
# del_format = workbook.add_format({'font_strikeout': True, 'valign': 'vcenter', 'border': 1})
# del_format2 = workbook.add_format({'font_strikeout': True, 'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})
# add_format = workbook.add_format({'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})
#
# # Prcd 17-1 : 셀 테두리 설정
# worksheet1.set_column(0, df_inf_change.shape[1] - 1, None, gen_format)
# worksheet2.set_column(0, df_col_inf.shape[1] - 1, None, gen_format)
# worksheet3.set_column(0, df_color.shape[1] - 1, None, gen_format)
# # Prcd 17-2 : 셀 틀 고정
# worksheet1.freeze_panes('F2')
# worksheet2.freeze_panes(1, 5)
# worksheet3.freeze_panes('F2')
# # Prcd 17-3 : 셀 필터링
# worksheet1.autofilter(0, 0, df_col_inf.shape[0] - 1, df_col_inf.shape[1] - 1, )
# worksheet2.autofilter(0, 0, df_color.shape[0] - 1, df_color.shape[1] - 1, )
# worksheet3.autofilter(0, 0, df_inf_change.shape[0] - 1, df_inf_change.shape[1] - 1, )
#
# start2 = time.time()
#
# # Prcd 18 : Header 포맷 적용
# for col_num, val in enumerate(df_col_inf.columns.values):
#     worksheet1.write(0, col_num, val, header_format)
#
# for col_num, val in enumerate(df_color.columns.values):
#     worksheet2.write(0, col_num, val, header_format)
#
# for col_num, val in enumerate(df_inf_change.columns.values):
#     worksheet3.write(0, col_num, val, header_format)
#
# # Prcd 18-1 : 변경사항 포맷 적용
# for i, j, v in li_inf_change_orig:
#     worksheet1.write(i + 1, j, v, inf_change_format)
#
# for i, j, v in li_color:
#     worksheet2.write(i + 1, j, v, inf_change_format)
#
# for i, j, v in li_inf_change:
#     worksheet3.write(i + 1, j, v, inf_change_format)
#
# # Prcd 18-2 : 삭제아이템 포맷 적용
# for i, j, v in li_del_enum1:
#     worksheet1.write(i + 1, j, v, del_format)
#
# for i, j, v in li_del_enum2:
#     worksheet2.write(i + 1, j, v, del_format)
#
# for i, j, v in li_del_enum3:
#     worksheet3.write(i + 1, j, v, del_format2)
#
# # Prcd 18-3 : 추가아이템 포맷 적용
# for i, j, v in li_add_enum1:
#     worksheet1.write(i + 1, j, v, add_format)
#
# for i, j, v in li_add_enum2:
#     worksheet2.write(i + 1, j, v, add_format)
#
# for i, j, v in li_add_enum3:
#     worksheet3.write(i + 1, j, v, add_format)
#
# # Prcd 19 : 종료
# writer.close()
#
# end5 = time.time()
#
# print(f"{end1 - start1:.5f} sec")
# print(f"{end2 - start1:.5f} sec")
# print(f"{end3 - start1:.5f} sec")
# print(f"{end4 - start1:.5f} sec")
# print(f"{end5 - start1:.5f} sec")
# print(f"{end5 - start2:.5f} sec")
# print(f'Excel file {xlFileName} was created')
#
# # wb = load_workbook(filename=xlFileName)
# # ws = wb.active
# #
# # ws.cell(row=1, column=1).fill = PatternFill('solid', '00FFCC00')
# # ws.cell(row=2, column=2).fill = PatternFill('solid', fgColor='00FF9900')
# #
# # wb.save(xlFileName)
# #
# # end6 = time.time()
# # print(f"{end6 - start1:.5f} sec")
