import pandas as pd
import numpy as np
# import openpyxl
import xlsxwriter

from math import floor, log10

df_pd_r0_origin = pd.read_excel('AVEVA_Mass_R1.xlsx')

# xl = pd.ExcelFile('PD_INS_221007.xlsx')
# sh_name = xl.sheet_names
# print(sh_name)

df_pd_r0 = df_pd_r0_origin.fillna('-')
df_pd_r0 = df_pd_r0.drop(index = df_pd_r0[df_pd_r0['TagNo'] == '-'].index)

df_pd_r1_origin = pd.read_excel('AVEVA_Mass_R2.xlsx')

df_pd_r1 = df_pd_r1_origin.fillna('-')
df_pd_r1 = df_pd_r1.drop(index = df_pd_r1[df_pd_r1['TagNo'] == '-'].index)


global flowSig
flowSig = 3

def roundFlow(x):
    if type(x) is float:
        if x >= 100:
            x = round(x, flowSig - int(floor(log10(abs(x)))) - 1)
            x = int(x)
            return x
        elif 100 > x >= 0.1:
            x = round(x + 10**(-len(str(x))-1), 1)
            return x
        else:
            x = round(x + 10**(-len(str(x))-1), 3)
            return x

    elif type(x) is int:
        if x >= 100:
            x = round(x, flowSig - int(floor(log10(abs(x)))) - 1)
            return x
        else:
            return x
    else:
        return x

try:
    df_pd_r0['FlowMax'] = df_pd_r0['FlowMax'].apply(lambda x: roundFlow(x))
    df_pd_r0['FlowNormal'] = df_pd_r0['FlowNormal'].apply(lambda x: roundFlow(x))
    df_pd_r0['FlowMin'] = df_pd_r0['FlowMin'].apply(lambda x: roundFlow(x))

    df_pd_r1['FlowMax'] = df_pd_r1['FlowMax'].apply(lambda x: roundFlow(x))
    df_pd_r1['FlowNormal'] = df_pd_r1['FlowNormal'].apply(lambda x: roundFlow(x))
    df_pd_r1['FlowMin'] = df_pd_r1['FlowMin'].apply(lambda x: roundFlow(x))
except:
    print("No Column Name")
    pass


global revNo
revNo = 0

df_pd_r0['Rev'] = 1
df_pd_r1['Rev'] = 2


tag_dropped = set(df_pd_r0['TagNo']) - set(df_pd_r1['TagNo'])
tag_added = set(df_pd_r1['TagNo']) - set(df_pd_r0['TagNo'])

print('삭제된 아이템: ', tag_dropped)
print('추가된 아이템: ', tag_added)

df_dropped = df_pd_r0[df_pd_r0['TagNo'].isin(tag_dropped)].iloc[:,:]
df_added = df_pd_r1[df_pd_r1['TagNo'].isin(tag_added)].iloc[:,:]



df_concatenated = pd.concat([df_pd_r0, df_pd_r1], ignore_index=True)

changes = df_concatenated.drop_duplicates(df_concatenated.columns[2:], keep='last')
# print(changes)

duplicated_list = changes[changes['TagNo'].duplicated()]['TagNo'].to_list()
df_changes = changes[changes['TagNo'].isin(duplicated_list)]

# print(duplicated_list)
# print(df_changes)

# 맨 뒤의 iloc 은 맨끝이나 맨 앞쪽부터 비교시 분리해야할 컬럼을 위해 사용함. 전체를 나타내도 무방할 경우 삭제.
df_changes_r0 = df_changes[df_changes['Rev'] == 1].iloc[:,:]
df_changes_r0 = df_changes_r0.sort_values(by='TagNo')
# print(df_changes_r0)

## df_changes_r0.sort_values(by='TagNo' , inplace = True) 참조한 사이트의 명령문으로 SettingWithCopyWarning 이 뜸



## 아랫줄 df0 가 쓰이는데가 없다;;
# df0 = df_changes_r0.sort_values(by='TagNo', ascending=False)

# Todo : 하나의 Process Data 내에서 중복인 경우 처리
df_changes_r1 = df_changes[df_changes['Rev'] == 2].iloc[:,:]
df_changes_r1 = df_changes_r1.sort_values(by='TagNo')
print(df_changes_r1)



# df_info_changed = df_changes_r0.copy()
# for i in range(len(df_changes_r1.index)):
#     for j in range(len(df_changes_r1.columns)):
#         if (df_changes_r1.iloc[i, j] != df_changes_r0.iloc[i, j]):
#             df_info_changed.iloc[i, j] = str(df_changes_r0.iloc[i, j]) + "==>" + str(df_changes_r1.iloc[i,j])

changedItemList = []
changedItem=[]
colorItem=[]

df2_c = df_pd_r1.copy()
df2_ci = df_pd_r1.copy()

# Todo 변경된 것이 없을 경우 처리 방법 구현해야함

df_info_changed = df_changes_r1.copy()
for i in range(len(df_changes_r1.index)):
    for j in range(len(df_changes_r1.columns)):
        if (df_changes_r1.iloc[i, j] != df_changes_r0.iloc[i, j]):
            changedItemList.append([i,j])
            df_info_changed.iloc[i, j] = str(df_changes_r0.iloc[i, j]) + " => " + str(df_changes_r1.iloc[i,j])
            print('변경 :', df_info_changed.iloc[i, j])
            df2_index = df2_ci.index[df2_ci['TagNo'] == df_changes_r1.iloc[i, 3]].tolist()
            print(df2_index)

            changedItemList.append([i, j, df_info_changed.iloc[i, j]])
            changedItem.append([df2_index[0], j, df_info_changed.iloc[i, j]])
            colorItem.append([df2_index[0], j, df2_c.iloc[df2_index[0], j]])


#
# with pd.ExcelWriter('campare3.xlsx') as writer:
#     df_info_changed.to_excel(writer, sheet_name='infor_changed', index = False)
#     df_added.to_excel(writer, sheet_name='added', index = False)
#     df_dropped.to_excel(writer, sheet_name='dropped', index = False)


# Excel 출력
writer = pd.ExcelWriter("compare4.xlsx", engine="xlsxwriter")
df2_ci.to_excel(writer, sheet_name='df2_ci', index=False)
df2_c.to_excel(writer, sheet_name='df2_c', index=False)
df_info_changed.to_excel(writer, sheet_name='infor_changed', index=False)
df_added.to_excel(writer, sheet_name='added', index=False)
df_dropped.to_excel(writer, sheet_name='dropped', index=False)

workbook = writer.book
worksheet1 = writer.sheets['infor_changed']
worksheet2 = writer.sheets['df2_ci']
worksheet3 = writer.sheets['df2_c']

cell_format = workbook.add_format({'bold': True, 'text_wrap': True, 'valign': 'vcenter', 'fg_color': 'yellow', 'border': 1})

for col_num, val in enumerate(df_info_changed.columns.values):
    worksheet1.write(0,col_num, val, cell_format)

for i , j, v in changedItem:
    worksheet2.write(i+1, j, v, cell_format)

for i, j, v in colorItem:
    worksheet3.write(i + 1, j, v, cell_format)


writer.close()


