import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5 import uic

import time

import pandas as pd

from compare_data import ExcelComparator

form_class = uic.loadUiType("inst_tool4.ui")[0]


class StatusWorker(QThread):
    status = pyqtSignal(str)
    finished = pyqtSignal()

    def __init__(self, param):
        super().__init__()
        self.param = param

    def run(self):
        comparator = ExcelComparator(self.report_status)
        if self.param['std_sheets']:
            comparator.use_std_sheet = True
            comparator.relevant_sheets = self.param['std_sheets_list']
        else:
            comparator.use_std_sheet = False
            comparator.old_comp_sheet = self.param['old_combo']
            comparator.new_comp_sheet = self.param['new_combo']

        comparator.save_filename = self.param['save']

        if self.param['report']:
            comparator.produce_report = True
        else:
            comparator.produce_report = False

        if self.param['display_change']:
            comparator.display_change_info = True
        else:
            comparator.display_change_info = False

        comparator.get_color(self.param['color'])

        comparator.old_file = self.param['old_file']
        comparator.new_file = self.param['new_file']

        comparator.tag_no = self.param['tag_no']
        comparator.old_tag_no = self.param['old_tag_no']
        comparator.exist = self.param['exist']
        comparator.cases = self.param['cases']

        comparator.run_comparision()
        self.finished.emit()

    def report_status(self, message):
        self.status.emit(message)


class WindowClass(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.fname = None
        self.fname2 = None

        self.save_file_name = None
        self.lineEdit_47.textChanged.connect(self.decision_save_file_name)

        self.exist = 'Logically deleted from the project'
        self.lineEdit_39.textChanged.connect(self.decide_exist_col_name)

        self.tag_no = 'Name'
        self.lineEdit_33.textChanged.connect(self.decide_tag_no_col_name)

        self.cases = 'Case'
        self.lineEdit_40.textChanged.connect(self.decide_case_col_name)

        self.old_tag_no = 'Old Tag Name'
        self.lineEdit_37.textChanged.connect(self.decide_old_tag_no_col_name)

        self.color_name = 'ffff00'  # 기본 노란색 지정

        # TODO : 변수값을 None 으로 적용 시 변수를 사용하는 시점에 None 값으로 에러가 나는 경우를 방지하고자 리스트값 지정. 제외하고 적용 체크 필요
        self.std_sheets_list = ['Flow', 'Level', 'Press', 'Temp', 'CV', 'On-Off', 'PSV', 'Misc']
        self.old_combo_sheet_list = []
        self.new_combo_sheet_list = []

        # Standard Sheet Name
        self.lineEdit_for_std_sheet_list = [self.lineEdit_24, self.lineEdit_25, self.lineEdit_26, self.lineEdit_27,
                                            self.lineEdit_28, self.lineEdit_29, self.lineEdit_30, self.lineEdit_31]
        for line_edit in self.lineEdit_for_std_sheet_list:
            line_edit.textChanged.connect(self.make_standard_sheet_name)

        # Loaded Sheets Name
        self.old_combo_boxes_list = [self.findChild(QComboBox, f"comboBox_{i + 1}") for i in range(8)]
        self.new_combo_boxes_list = [self.findChild(QComboBox, f"comboBox_{i + 9}") for i in range(8)]
        
        for old_combo in self.old_combo_boxes_list:
            old_combo.activated.connect(self.make_selected_sheet_name)
            
        for new_combo in self.new_combo_boxes_list:
            new_combo.activated.connect(self.make_selected_sheet_name)

        self.pushButton.clicked.connect(lambda: self.display_page(0))
        self.pushButton_2.clicked.connect(lambda: self.display_page(1))

        self.pushButton_5.clicked.connect(self.load_old_file)
        self.pushButton_6.clicked.connect(self.load_new_file)
        self.pushButton_7.clicked.connect(self.check_condition_to_run)
        self.pushButton_19.clicked.connect(self.load_sheet_name)
        self.pushButton_33.clicked.connect(self.select_color)

        self.checkBox_3.clicked.connect(self.select_sheet_type)

    def display_page(self, index):
        self.stackedWidget.setCurrentIndex(index)

    def load_old_file(self):
        fname = QFileDialog.getOpenFileName(self, 'OPEN OLD DATA FILE')
        filename1 = fname[0].split("/")[-1]
        self.old_file = fname[0]
        self.lineEdit_45.setText(filename1)

        if fname:
            self.fname = fname
            self.active_load_sheet_name()

        for i in self.old_combo_boxes_list:
            i.clear()

    def load_new_file(self):
        fname2 = QFileDialog.getOpenFileName(self, 'OPEN OLD DATA FILE')
        filename2 = fname2[0].split("/")[-1]
        self.new_file = fname2[0]
        self.lineEdit_46.setText(filename2)

        if fname2:
            self.fname2 = fname2
            self.active_load_sheet_name()

        dot_no = filename2.find('.')
        date = time.strftime('%Y%m%d', time.localtime(time.time()))
        save_file_name = filename2[:dot_no] + '_comp_' + date + filename2[dot_no:]
        self.lineEdit_47.setText(save_file_name)

        for i in self.new_combo_boxes_list:
            i.clear()

    def select_sheet_type(self):
        if self.checkBox_3.isChecked():
            self.groupBox_5.setEnabled(False)
        else:
            self.groupBox_5.setEnabled(True)

    def make_standard_sheet_name(self):
        std_sheets_list = [self.lineEdit_24.text(), self.lineEdit_25.text(), self.lineEdit_26.text(),
                           self.lineEdit_27.text(), self.lineEdit_28.text(), self.lineEdit_29.text(),
                           self.lineEdit_30.text(), self.lineEdit_31.text()]
        self.std_sheets_list = [sheet for sheet in std_sheets_list if sheet != '']

    def make_selected_sheet_name(self):
        self.old_combo_sheet_list = [cb.currentText() for cb in self.old_combo_boxes_list if cb.currentText() != '']
        self.new_combo_sheet_list = [cb.currentText() for cb in self.new_combo_boxes_list if cb.currentText() != '']

    def decision_save_file_name(self):
        self.save_file_name = self.lineEdit_47.text()

    def select_color(self):
        col = QColorDialog.getColor()

        if col.isValid():
            self.frame_45.setStyleSheet('QWidget { background-color: %s }' % col.name())
            self.color_name = col.name()

    def decide_exist_col_name(self):
        self.exist = self.lineEdit_39.text()

    def decide_tag_no_col_name(self):
        self.tag_no = self.lineEdit_33.text()

    def decide_case_col_name(self):
        self.cases = self.lineEdit_40.text()

    def decide_old_tag_no_col_name(self):
        self.old_tag_no = self.lineEdit_37.text()

    def active_load_sheet_name(self):
        if self.fname and self.fname2:
            self.pushButton_19.setEnabled(True)

    def load_sheet_name(self):
        old_xl = pd.ExcelFile(self.old_file)
        new_xl = pd.ExcelFile(self.new_file)
        self.old_combo_sheet_list = old_xl.sheet_names
        self.old_combo_sheet_list.insert(0, '')
        self.new_combo_sheet_list = new_xl.sheet_names
        self.new_combo_sheet_list.insert(0, '')

        for i, old_combo_box in enumerate(self.old_combo_boxes_list):
            old_combo_box.addItems(self.old_combo_sheet_list)
            if i+1 < len(self.old_combo_sheet_list):
                old_combo_box.setCurrentIndex(i+1)
            else:
                old_combo_box.setCurrentIndex(0)

        for i, new_combo_box in enumerate(self.new_combo_boxes_list):
            new_combo_box.addItems(self.new_combo_sheet_list)
            if i+1 < len(self.new_combo_sheet_list):
                new_combo_box.setCurrentIndex(i+1)
            else:
                new_combo_box.setCurrentIndex(0)

    def show_error_sheets_qty_msg(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setText('Number of sheets to compare does not match.')
        msg.setWindowTitle("Error")
        msg.exec_()

    def check_condition_to_run(self):
        if self.checkBox_3.isChecked() and not self.std_sheets_list:
            self.show_error_sheets_qty_msg()
        elif not self.checkBox_3.isChecked() and len(self.old_combo_sheet_list) != len(self.new_combo_sheet_list):
            self.show_error_sheets_qty_msg()
        elif not self.checkBox_3.isChecked() and len(self.old_combo_sheet_list) + len(self.new_combo_sheet_list) == 0:
            self.show_error_sheets_qty_msg()
        else:
            self.compare_doc()

    def compare_doc(self):
        # 다른 클래스에서 실행되므로 사용할 변수들은 Dictionary 로 적용함
        param = {
            'old_file': self.old_file,
            'new_file': self.new_file,
            'std_sheets': self.checkBox_3.isChecked(),
            'report': self.checkBox_2.isChecked(),
            'display_change': self.checkBox_6.isChecked(),
            'color': self.color_name,
            'std_sheets_list': self.std_sheets_list,
            'old_combo': self.old_combo_sheet_list,
            'new_combo': self.new_combo_sheet_list,
            'save': self.lineEdit_47.text(),
            'tag_no': self.tag_no,
            'old_tag_no': self.old_tag_no,
            'exist': self.exist,
            'cases': self.cases
        }

        self.thread = StatusWorker(param)
        self.thread.status.connect(self.update_status)
        self.thread.finished.connect(self.calculation_finished)

        self.thread.start()

    def update_status(self, message):
        self.label_6.setText(f'Status: {message}')

    def calculation_finished(self):
        QMessageBox.information(self, 'Completed', 'Document creation is complete.')

    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'QUIT', 'Are you sure you want to quit?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    myWindow = WindowClass()
    myWindow.show()
    app.exec_()


