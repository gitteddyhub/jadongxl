"""
엑셀 파일에 표스타일이 있을 경우, 저장 시 에러가 생김.
엑셀 파일의 데이타를 추출해 별도의 엑셀파일로 저장하는 것도 좋은 방법이지만,
그럴경우 변경된 값 혹은 색상이 있는 파일의 경우, 색상을 불러오기도 힘들고, 누적처리가 까다로움

공정으로부터 표스타일이 없는 엑셀 파일을 요청해야함.

Tag No 변경 아이템의 처리는  A/B -> B/A, B/A -> A/B 의 경우에 Tag No 변경이 아니라, 그 외의 값이 변경된 것으로 처리됨

시트 이름과 열목록은 기본 포맷과 일치해야한다.

Tag No 가 변경된 아이템 중 old tag name 이 잘 못 기재되는 경우, 해당 아이템은 추가 아이템으로 인식된다.

삭제된 아이템이 이전과 변경이 없을 경우 색상 및 삭선은 표현되지 않음
"""

import pandas as pd
import numpy as np

from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font
# from openpyxl.styles.fonts import Font

import time
import sys

exist = 'Logically deleted from the project'
tag_no = 'Name'
old_tag_no = 'Old Tag Name'

relevant_sheets = ['Flow', 'Level', 'Press', 'Temp', 'CV', 'On-Off', 'PSV', 'Misc']

display_change_info = False

start1 = time.time()

# Prcd 1 : Process Data 불러오기
old_file = 'AE_Sam1.xlsx'
new_file = 'AE_Sam2.xlsx'


def create_save_filename(file_to_save):  # 저장되는 파일의 이름 설정
    dot_no = file_to_save.find('.')
    date = time.strftime('%Y%m%d', time.localtime(time.time()))
    file_name = file_to_save[:dot_no] + '_comp_' + date + file_to_save[dot_no:]
    return file_name


def get_data_info(old_excel_path, new_excel_path):
    # 엑셀 불러오기
    old_xls = pd.ExcelFile(old_excel_path)
    new_xls = pd.ExcelFile(new_excel_path)

    # 불러온 엑셀의 시트이름을 집합으로 표기. (기존에는 pd.read_excel 로 불러와 df.key() 로 sheet 이름을 확인했음.)
    old_available_sheets = set(old_xls.sheet_names)
    new_available_sheets = set(new_xls.sheet_names)

    relevant_sheets_set = set(relevant_sheets)

    # 두 엑셀 시트 이름과 표본 시트 이름의 교집합 구하고, 그 교집합들을 다시 교집합으로 구하면, 비교해야할 시트명이 결정됨.
    old_filtered_sheets_set = old_available_sheets.intersection(relevant_sheets_set)
    new_filtered_sheets_set = new_available_sheets.intersection(relevant_sheets_set)

    compare_sheets_list = list(old_filtered_sheets_set.intersection(new_filtered_sheets_set))

    return old_xls, new_xls, compare_sheets_list


def get_df_info(xls1, xls2, sheets_list):

    # 비교할 시트명으로 비교할 data frame 을 리스트로 생성
    old_df_list = [pd.read_excel(xls1, sheet_name=sheet, dtype='object') for sheet in sheets_list]
    new_df_list = [pd.read_excel(xls2, sheet_name=sheet, dtype='object') for sheet in sheets_list]

    # 비교할 Sheet 수량 확인
    sheets_qty = len(sheets_list)

    # 각 df 의 열 개수 (해당 개수로 추가/삭제의 셀 서식 변경 시 활용)
    col_qty_list = []
    for i in range(len(sheets_list)):
        col_qty = len(new_df_list[i].columns)
        col_qty_list.append(col_qty)

    return old_df_list, new_df_list, sheets_qty, col_qty_list


def tag_no_preprocess(*two_data):
    # 추후 변경된 tag no 와 비교할 기준인 full tag index 를 작성
    full_tag_idx_list = []
    turn = 0
    for data in two_data:
        turn += 1
        for i in range(sh_num):
            data[i] = data[i].fillna('-')
            data[i]['Full Tag'] = data[i][tag_no] + data[i]['Case']
            data[i]['Old Full Tag'] = data[i][old_tag_no] + data[i]['Case']
            data[i]['Tag Check'] = data[i]['Full Tag'] + data[i]['Old Full Tag']
            data[i][exist] = data[i][exist].astype(str)
            # TODO : astype 후 대문자로 바꾸기해야함. bool 로 되어있는 객체는 dtype=object 로 불러오더라도 True, False 가 됨
            # TODO : 즉 대문자로 명기되어 있는 bool 이 위와 같이 되어, 변경된 것으로 나올 수 있음 (TRUE -> True)
            print(data[i][exist])
            df_info[0][i][exist] = df_info[0][i][exist].astype(str)

            if turn == 2:
                full_tag_idx_list.append(data[i]['Full Tag'].tolist())

            # old, new dataframe 을 합칠 예정이므로 구분을 위한 열 추가
            data[i]['RevCon'] = turn
            # Tag No 중복 여부 확인 (unique 한 값이 몇개인지 알려줌)
            duplicate_count = len(data[i].index) - data[i]['Full Tag'].nunique()
            if duplicate_count >= 1:
                li_duplicate = set(data[i].loc[data[i].duplicated(['Full Tag']), 'Full Tag'])
                print(' %d 번째 Data 의 중복 Tag No 는 다음과 같습니다.' % turn, li_duplicate)
                sys.exit()
    return full_tag_idx_list


def changed_tag_apply():
    list_curr_tag = []
    list_prev_tag = []

    for i in range(sh_num):

        # ctn : Changed Tag No. 원본에서 df 을 복사하여 변경된 tag no list 작성 자료로 사용
        df_old_ctn = df_info[0][i].copy()
        df_new_ctn = df_info[1][i].copy()

        df_old_ctn = df_old_ctn[df_old_ctn[old_tag_no].str.len() > 3]
        df_new_ctn = df_new_ctn[df_new_ctn[old_tag_no].str.len() > 3]

        # old tag name 이 있는 아이템 중 두 df 의 old tag name 과 name 이 쌍으로 동일한 것은 tag 변경 아이템에서 제외
        unchanged_tag_set = set(df_old_ctn['Tag Check']).intersection(df_new_ctn['Tag Check'])
        df_new_ctn = df_new_ctn.loc[~df_new_ctn['Tag Check'].isin(unchanged_tag_set)]

        # tag 변경이 있는 아이템의 tag no 를 변경전/후 tag no 로 나누어 old df 의 tag no 를 변경 후의 tag no 로 변경
        list_curr_tag.append(df_new_ctn['Full Tag'].tolist())
        list_prev_tag.append(df_new_ctn['Old Full Tag'].tolist())

        for j, k in zip(df_new_ctn['Old Full Tag'], df_new_ctn['Full Tag']):
            df_info[0][i].loc[df_info[0][i]['Full Tag'] == j, 'Full Tag'] = k

    return list_curr_tag, list_prev_tag


def get_add_del_tag():  # TODO : add 와 del 을 따로 분리
    list_add = []
    list_del_total = []

    for i in range(sh_num):
        # 두 df 의 차집합으로 추가된 tag list 생성
        set_add = set(df_info[1][i]['Full Tag']) - set(df_info[0][i]['Full Tag'])
        list_add.append(list(set_add))

        # 두 df 의 차집합으로 삭제된 tag 집합 생성
        set_del = set(df_info[0][i]['Full Tag']) - set(df_info[1][i]['Full Tag'])

        # tag 삭제를 표시하는 열이 있다면 해당 열을 사용하여 삭제된 tag 집합 생성
        # df_info[0][i][exist] = df_info[0][i][exist].astype(str)
        # df_info[1][i][exist] = df_info[1][i][exist].astype(str)
        logic_del_old = set(df_info[0][i][df_info[0][i][exist].str.contains('TRUE', case=False)]['Full Tag'])
        logic_del_new = set(df_info[1][i][df_info[1][i][exist].str.contains('TRUE', case=False)]['Full Tag'])
        print('logic DEL', logic_del_new)

        # 두 df 의 차집합과 삭제 표시 열로 확인된 tag 를 집합으로 생성 후 list 로 변환
        set_logic_del = logic_del_new - logic_del_old
        print('SET LOGIC DEL', set_logic_del)
        set_del_total = set_del.union(set_logic_del)
        list_del_total.append(list(set_del_total))

    return list_add, list_del_total


def df_compare():
    list_df_changes_old = []
    list_df_changes_new = []
    for i in range(sh_num):
        # Old/New DF 를 병합 후 동일한 중복 아이템을 제거하여 변경된 아이템 추출 과정
        df_concat = pd.concat([df_info[0][i], df_info[1][i]], ignore_index=True)
        print('*' * 150)
        print(df_info[0][i][exist])
        print('*' * 150)
        print(df_info[1][i][exist])
        print('*' * 150)
        df_drop_du = df_concat.drop_duplicates(df_concat.columns[1:-1], keep='last')

        # 동일한 중복 아이템 제거 후, Tag No 가 중복되어 있는 아이템은 변경된 아이템이며, 나머지는 추가/삭제 아이템임
        df_changes = df_drop_du[df_drop_du.duplicated('Full Tag', keep=False)]

        # 변경된 아이템(중복 삭제 후에도 tag 가 중복된 아이템)을 Old/New 로 분리
        df_changes_old = df_changes[df_changes['RevCon'] == 1].iloc[:, :-1]
        df_changes_old.sort_values(by='Full Tag', inplace=True)
        list_df_changes_old.append(df_changes_old)

        df_changes_new = df_changes[df_changes['RevCon'] == 2].iloc[:, :-1]
        df_changes_new.sort_values(by='Full Tag', inplace=True)
        list_df_changes_new.append(df_changes_new)

    return list_df_changes_old, list_df_changes_new


def load_workbook_wrapper(filename):
    workbook = load_workbook(filename)
    return workbook


def get_coordination(revised_old_df, revised_new_df):
    all_coordination_list = []
    for i in range(sh_num):
        coordination_list = []
        for j in range(len(revised_new_df[i].index)):
            for k in range(len(revised_new_df[i].columns) - 3):
                if revised_new_df[i].iat[j, k] != revised_old_df[i].iat[j, k]:
                    tag = revised_new_df[i].iloc[j, revised_new_df[i].columns.get_loc('Full Tag')]
                    row_no = std_idx_list[i].index(tag) + 2
                    col_no = k + 1
                    coordination_list.append([row_no, col_no])
                    # data 의 변경 사항을 이전 값과 비교해서 보기를 원할 경우 '이전값 => 변경값' 으로 표기
                    if display_change_info:
                        wb[data_info[2][i]].cell(row=row_no, column=col_no).value = str(
                            revised_old_df[i].iat[j, k]) + " => " + str(
                            revised_new_df[i].iat[j, k])

        all_coordination_list.append(coordination_list)

    return all_coordination_list


def coloring_xls(workbook, coord):
    for i in range(sh_num):
        for j in range(len(coord[i])):
            cell = workbook[data_info[2][i]].cell(row=coord[i][j][0], column=coord[i][j][1])
            cell.fill = fill


def add_item_process(workbook):
    for i in range(sh_num):
        # 기준이 되는 리스트를 인덱스로 만들어줌. (리스트 값과 순서를 쌍으로 만듦)
        tag_map = {tag: idx for idx, tag in enumerate(std_idx_list[i])}
        # 리스트에 아이템이 만약 tag_map 에 있다면 그 위치를 반환
        add_position = [tag_map[item] for item in add_del_tag[0][i] if item in tag_map]
        for j in add_position:
            for k in range(df_info[3][i]):
                cell = workbook[data_info[2][i]].cell(row=j + 2, column=k + 1)
                cell.fill = fill


def del_item_process(workbook):
    for i in range(sh_num):
        tag_map = {tag: idx for idx, tag in enumerate(std_idx_list[i])}
        del_position = [tag_map[item] for item in add_del_tag[1][i] if item in tag_map]
        for j in del_position:
            for k in range(df_info[3][i]):
                cell = workbook[data_info[2][i]].cell(row=j + 2, column=k + 1)
                cell.fill = fill
                cell.font = font


# 함수 실행


fill = PatternFill(fill_type='solid', fgColor="ffff00")
font = Font(strike=True)

save_filename = create_save_filename(new_file)

data_info = get_data_info(old_file, new_file)

df_info = get_df_info(*data_info)

sh_num = df_info[2]

# full_tag_index 가 결과 값이며, 추후 변경 사항이 있는 tag no 와 비교하는 기준 tag index 임
std_idx_list = tag_no_preprocess(df_info[0], df_info[1])
list_changed_tag = changed_tag_apply()
add_del_tag = get_add_del_tag()
df_change = df_compare()
print(df_info[0][0][exist])
wb = load_workbook_wrapper(new_file)

coordination = get_coordination(df_change[0], df_change[1])

coloring_xls(wb, coordination)
add_item_process(wb)
del_item_process(wb)

wb.save(save_filename)
